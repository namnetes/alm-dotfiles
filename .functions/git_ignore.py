"""
Ce script Python est un outil d'automatisation pour les projets Git. 
Son objectif principal est de synchroniser le fichier .gitignore avec une liste de r√®gles d'exclusion pr√©d√©finies.

Comment √ßa fonctionne ?
-----------------------
1. Il v√©rifie si un fichier .gitignore existe d√©j√† dans le r√©pertoire actuel.
2. Si le fichier n'existe pas, il le cr√©e.
3. Si le fichier existe, il parcourt chaque ligne pour v√©rifier si des entr√©es de sa liste de r√©f√©rence sont manquantes.
4. Il affiche un message pour indiquer si le fichier est complet ou s'il manque des entr√©es.

Utilit√© :
---------
Le fichier .gitignore est crucial pour un projet Git car il indique quels fichiers et dossiers ignorer. 
Cela emp√™che le suivi de fichiers inutiles (comme les caches, les d√©pendances ou les fichiers de log) 
par le syst√®me de contr√¥le de version. Ce script garantit que votre fichier .gitignore contient 
toujours les exclusions essentielles pour une vari√©t√© de langages de programmation et d'outils, 
vous aidant √† maintenir un historique Git propre et organis√©.
"""
import os

GITIGNORE_SECTIONS = {
    "üåê Fichiers communs": [
        "*.log", "*.tmp", "*.bak", "*~", ".DS_Store", "Thumbs.db", ".idea/", ".vscode/",
        ".env", ".env.*"
    ],
    "üêö Bash": [
        "*.sh~", "*.swp", "*.swo", "bash_history", ".bash_profile", ".bashrc"
    ],
    "üêç Python": [
        "__pycache__/", "*.py[cod]", "*.pyo", "*.pyd", "*.egg", "*.egg-info/", "dist/",
        "build/", "*.spec", "*.sqlite3", "*.db", "*.ipynb_checkpoints/", ".mypy_cache/",
        ".pytest_cache/", ".tox/", ".venv/", "venv/", "Pipfile.lock", "poetry.lock"
    ],
    "üß† JavaScript / Node.js": [
        "node_modules/", "npm-debug.log*", "yarn-debug.log*", "yarn-error.log*",
        "pnpm-lock.yaml", "package-lock.json", "dist/", "coverage/", ".next/", "out/",
        ".cache/", ".eslintcache"
    ],
    "‚òï Java": [
        "*.class", "*.jar", "*.war", "*.ear", "*.iml", "target/", "bin/", "build/",
        ".gradle/", ".settings/", ".project", ".classpath"
    ],
    "üß™ Tests & CI": [
        "coverage/", "test-results/", "junit.xml", "*.lcov", "*.coverage"
    ],
    "üîß Outils & IDE": [
        "*.sublime-workspace", "*.sublime-project", "*.code-workspace", "*.tmproj",
        "*.komodoproject", "*.kate-swp", "*.goutputstream*", "*.directory",
    ],
    "üì¶ D√©pendances et artefacts": [
        "*.lock", "*.tar.gz", "*.zip", "*.exe", "*.dll", "*.so", "*.dylib", "*.out",
        "*.o", "*.obj", "*.a", "*.lib"
    ]
}

# La liste de r√©f√©rence compl√®te est reconstruite √† partir du dictionnaire
GITIGNORE_REFERENCE = [item for sublist in GITIGNORE_SECTIONS.values() for item in sublist]

path = ".gitignore"

if not os.path.exists(path):
    print(f"[INFO] Fichier {path} absent. Cr√©ation en cours...")
    with open(path, "w") as f:
        # √âcrire les sections et leurs lignes avec un en-t√™te de commentaire
        for section, lines in GITIGNORE_SECTIONS.items():
            f.write(f"\n# {section}\n")
            f.write("\n".join(lines) + "\n")
    print(f"[SUCCESS] Fichier {path} cr√©√© avec {len(GITIGNORE_REFERENCE)} entr√©es.")
else:
    print(f"[INFO] Fichier {path} d√©j√† pr√©sent. V√©rification du contenu...")
    with open(path, "r") as f:
        existing_lines = set(line.strip() for line in f if line.strip() and not line.startswith('#'))

    missing = [line for line in GITIGNORE_REFERENCE if line not in existing_lines]

    if not missing:
        print("[OK] Le fichier .gitignore est complet.")
    else:
        print(f"[WARNING] {len(missing)} entr√©es manquantes dans .gitignore :")
        for line in missing:
            # Recherche de la section manquante
            section_found = "Section inconnue"
            for section, rules in GITIGNORE_SECTIONS.items():
                if line in rules:
                    section_found = section
                    break
            print(f"  - {line} (dans la section '{section_found}')")
